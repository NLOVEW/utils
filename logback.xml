<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan:默认为true。作用：当设置为true时，如果配置文件发生改变，将会被重新加载
    scanPeriod：默认时间间隔为1分钟，默认单位是毫秒，当scan为true时，此属性生效。作用：检测配置文件是否有修改时间间隔
    debug：默认为false。作用：当此属性为true时，将打印出logback内部日志信息，实时查看logback运行状态
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--打印格式-->
    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-4level [%thread] %c=>%M %L   %m%n"/>
    <!--件存储路径-->
    <property name="log_dir" value="logs"/>

    <!--控制台模式-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <target>System.err</target>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>
    <!--文件格式-->
    <!--    <appender name="file" class="ch.qos.logback.core.FileAppender">-->
    <!--        <file>${log_dir}/logback.log</file>-->
    <!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
    <!--            <pattern>${pattern}</pattern>-->
    <!--        </encoder>-->
    <!--    </appender>-->
    <!-- 日志拆分/归档   -->
    <appender name="all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/rollLogback.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--拆分规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按照时间和压缩格式拆分文件名-->
            <!--<fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>-->
            <fileNamePattern>${log_dir}/%d{yyyy-MM-dd-HH-mm}.%i.log</fileNamePattern>
            <!--按照文件大小-->
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
    </appender>
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_dir}/error/error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
        <!--拆分规则-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按照时间和压缩格式拆分文件名-->
            <!--<fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>-->
            <fileNamePattern>${log_dir}/error/%d{yyyy-MM-dd-HH-mm}.%i.log</fileNamePattern>
            <!--按照文件大小-->
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--异步日志-->
    <appender name="asyncALL" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="all"/>
    </appender>
    <appender name="asyncError" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="error"/>
    </appender>

    <!--需要日志的包-->
    <!--<logger name="包名" level="日志等级"/>-->
    <!--<logger name="包名" level="日志等级"/>-->
    <root level="ALL">
        <appender-ref ref="console"/>
        <appender-ref ref="asyncALL"/>
        <appender-ref ref="asyncError"/>
    </root>
</configuration>